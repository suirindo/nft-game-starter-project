{"ast":null,"code":"var _jsxFileName = \"/Users/tomohiro/programing/ETH-NFT-game/nft-game-starter-project/src/Components/SelectCharacter/index.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport \"./SelectCharacter.css\";\nimport { ethers } from \"ethers\";\nimport { CONTRACT_ADDRESS, transformCharacterData } from \"../../constants\";\nimport myEpicGame from \"../../utils/MyEpicGame.json\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst SelectCharacter = _ref => {\n  _s();\n\n  let {\n    setCharacterNFT\n  } = _ref;\n  // characters = コントラクトから返されるNFTキャラクターのメタデータを保持するプロパティ\n  // setCharacters = charactersの状態を更新するプロパティ\n  // gameContract = コントラクトの状態を初期化して保存するプロパティ。\n  const [characters, setCharacters] = useState([]);\n  const [gameContract, setGameContract] = useState(null); // ページがロードされた瞬間に下記を実行する\n\n  useEffect(() => {\n    const {\n      ethereum\n    } = window;\n\n    if (ethereum) {\n      const provider = new ethers.providers.Web3Provider(ethereum);\n      const signer = provider.getSigner();\n      const gameContract = new ethers.Contract(CONTRACT_ADDRESS, myEpicGame.abi, signer); // gameContractの状態を更新する\n\n      setGameContract(gameContract);\n    } else {\n      console.log(\"Ethereum object not found\");\n    }\n  }, []);\n  useEffect(() => {\n    // NFTキャラクターのデータをスマートコントラクトから取得する\n    const getCharacters = async () => {\n      try {\n        console.log(\"Getting contract characters to mint\"); // ミント可能な全NFTキャラクターをコントラクトから呼び出す\n\n        const charactersTxn = await gameContract.getAllDefaultCharacters();\n        console.log(\"charactersTxn\", charactersTxn); // すべてのNFTキャラクターのデータを変換する\n\n        const characters = charactersTxn.map(characterData => transformCharacterData(characterData)); // ミント可能なすべてのNFTキャラクターの状態を設定する\n\n        setCharacters(characters);\n      } catch (error) {\n        console.error(\"Something went wrong fetching characters:\", error);\n      }\n    }; // gameContractの準備ができたら、NFTキャラクターを読み込む\n\n\n    if (gameContract) {\n      getCharacters();\n    }\n  }, [gameContract]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"select-character-container\",\n    children: /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \" \\u23EC\\u4E00\\u7DD2\\u306B\\u6226\\u3046NFT\\u30AD\\u30E3\\u30E9\\u30AF\\u30BF\\u30FC\\u3092\\u9078\\u629E\\u23EC\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 61,\n    columnNumber: 9\n  }, this);\n};\n\n_s(SelectCharacter, \"ReBpEb1ZDzzSsIn8oOlkhmevdME=\");\n\n_c = SelectCharacter;\nexport default SelectCharacter;\n\nvar _c;\n\n$RefreshReg$(_c, \"SelectCharacter\");","map":{"version":3,"names":["React","useEffect","useState","ethers","CONTRACT_ADDRESS","transformCharacterData","myEpicGame","SelectCharacter","setCharacterNFT","characters","setCharacters","gameContract","setGameContract","ethereum","window","provider","providers","Web3Provider","signer","getSigner","Contract","abi","console","log","getCharacters","charactersTxn","getAllDefaultCharacters","map","characterData","error"],"sources":["/Users/tomohiro/programing/ETH-NFT-game/nft-game-starter-project/src/Components/SelectCharacter/index.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport \"./SelectCharacter.css\";\nimport { ethers } from \"ethers\";\nimport { CONTRACT_ADDRESS, transformCharacterData } from \"../../constants\";\nimport myEpicGame from \"../../utils/MyEpicGame.json\";\n\nconst SelectCharacter = ({ setCharacterNFT}) => {\n    // characters = コントラクトから返されるNFTキャラクターのメタデータを保持するプロパティ\n    // setCharacters = charactersの状態を更新するプロパティ\n    // gameContract = コントラクトの状態を初期化して保存するプロパティ。\n    const [characters, setCharacters] = useState([]);\n    const [gameContract, setGameContract] = useState(null);\n\n    // ページがロードされた瞬間に下記を実行する\n    useEffect(() => {\n        const { ethereum } = window;\n        if (ethereum) {\n            const provider = new ethers.providers.Web3Provider(ethereum);\n            const signer = provider.getSigner();\n            const gameContract = new ethers.Contract(\n                CONTRACT_ADDRESS,\n                myEpicGame.abi,\n                signer\n            );\n\n            // gameContractの状態を更新する\n            setGameContract(gameContract);\n        } else {\n            console.log(\"Ethereum object not found\");\n        }\n    }, []);\n\n    useEffect(() => {\n        // NFTキャラクターのデータをスマートコントラクトから取得する\n        const getCharacters = async () => {\n            try {\n                console.log(\"Getting contract characters to mint\");\n                // ミント可能な全NFTキャラクターをコントラクトから呼び出す\n                const charactersTxn = await gameContract.getAllDefaultCharacters();\n\n                console.log(\"charactersTxn\", charactersTxn);\n\n                // すべてのNFTキャラクターのデータを変換する\n                const characters = charactersTxn.map((characterData) => \n                transformCharacterData(characterData)\n                );\n\n                // ミント可能なすべてのNFTキャラクターの状態を設定する\n                setCharacters(characters);\n            } catch (error) {\n                console.error(\"Something went wrong fetching characters:\", error);\n            }\n        };\n        // gameContractの準備ができたら、NFTキャラクターを読み込む\n        if (gameContract) {\n            getCharacters();\n        }\n    }, [gameContract]);\n    \n    return (\n        <div className = \"select-character-container\">\n            <h2> ⏬一緒に戦うNFTキャラクターを選択⏬</h2>\n        </div>\n    );\n};\n\nexport default SelectCharacter;"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,OAAO,uBAAP;AACA,SAASC,MAAT,QAAuB,QAAvB;AACA,SAASC,gBAAT,EAA2BC,sBAA3B,QAAyD,iBAAzD;AACA,OAAOC,UAAP,MAAuB,6BAAvB;;;AAEA,MAAMC,eAAe,GAAG,QAAwB;EAAA;;EAAA,IAAvB;IAAEC;EAAF,CAAuB;EAC5C;EACA;EACA;EACA,MAAM,CAACC,UAAD,EAAaC,aAAb,IAA8BR,QAAQ,CAAC,EAAD,CAA5C;EACA,MAAM,CAACS,YAAD,EAAeC,eAAf,IAAkCV,QAAQ,CAAC,IAAD,CAAhD,CAL4C,CAO5C;;EACAD,SAAS,CAAC,MAAM;IACZ,MAAM;MAAEY;IAAF,IAAeC,MAArB;;IACA,IAAID,QAAJ,EAAc;MACV,MAAME,QAAQ,GAAG,IAAIZ,MAAM,CAACa,SAAP,CAAiBC,YAArB,CAAkCJ,QAAlC,CAAjB;MACA,MAAMK,MAAM,GAAGH,QAAQ,CAACI,SAAT,EAAf;MACA,MAAMR,YAAY,GAAG,IAAIR,MAAM,CAACiB,QAAX,CACjBhB,gBADiB,EAEjBE,UAAU,CAACe,GAFM,EAGjBH,MAHiB,CAArB,CAHU,CASV;;MACAN,eAAe,CAACD,YAAD,CAAf;IACH,CAXD,MAWO;MACHW,OAAO,CAACC,GAAR,CAAY,2BAAZ;IACH;EACJ,CAhBQ,EAgBN,EAhBM,CAAT;EAkBAtB,SAAS,CAAC,MAAM;IACZ;IACA,MAAMuB,aAAa,GAAG,YAAY;MAC9B,IAAI;QACAF,OAAO,CAACC,GAAR,CAAY,qCAAZ,EADA,CAEA;;QACA,MAAME,aAAa,GAAG,MAAMd,YAAY,CAACe,uBAAb,EAA5B;QAEAJ,OAAO,CAACC,GAAR,CAAY,eAAZ,EAA6BE,aAA7B,EALA,CAOA;;QACA,MAAMhB,UAAU,GAAGgB,aAAa,CAACE,GAAd,CAAmBC,aAAD,IACrCvB,sBAAsB,CAACuB,aAAD,CADH,CAAnB,CARA,CAYA;;QACAlB,aAAa,CAACD,UAAD,CAAb;MACH,CAdD,CAcE,OAAOoB,KAAP,EAAc;QACZP,OAAO,CAACO,KAAR,CAAc,2CAAd,EAA2DA,KAA3D;MACH;IACJ,CAlBD,CAFY,CAqBZ;;;IACA,IAAIlB,YAAJ,EAAkB;MACda,aAAa;IAChB;EACJ,CAzBQ,EAyBN,CAACb,YAAD,CAzBM,CAAT;EA2BA,oBACI;IAAK,SAAS,EAAG,4BAAjB;IAAA,uBACI;MAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EADJ;IAAA;IAAA;IAAA;EAAA,QADJ;AAKH,CA1DD;;GAAMJ,e;;KAAAA,e;AA4DN,eAAeA,eAAf"},"metadata":{},"sourceType":"module"}