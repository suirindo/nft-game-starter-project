{"ast":null,"code":"var _jsxFileName = \"/Users/tomohiro/programing/ETH-NFT-game/nft-game-starter-project/src/Components/SelectCharacter/index.js\",\n    _s = $RefreshSig$();\n\nimport LoadingIndicator from \"../../Components/LoadingIndicator\";\nimport React, { useEffect, useState } from \"react\";\nimport \"./SelectCharacter.css\";\nimport { ethers } from \"ethers\";\nimport { CONTRACT_ADDRESS, transformCharacterData } from \"../../constants\";\nimport myEpicGame from \"../../utils/MyEpicGame.json\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst SelectCharacter = _ref => {\n  _s();\n\n  let {\n    setCharacterNFT\n  } = _ref;\n  // characters = コントラクトから返されるNFTキャラクターのメタデータを保持するプロパティ\n  // setCharacters = charactersの状態を更新するプロパティ\n  // gameContract = コントラクトの状態を初期化して保存するプロパティ。\n  const [characters, setCharacters] = useState([]);\n  const [gameContract, setGameContract] = useState(null); // Minting の状態保存する状態変数を初期化します。\n\n  const [mintingCharacter, setMintingCharacter] = useState(false); // NFTキャラクターをMintする\n\n  const mintCharacterNFTAction = characterId => async () => {\n    try {\n      if (gameContract) {\n        // Mint が開始されたら、ローディングマークを表示する。\n        setMintingCharacter(true);\n        console.log(\"Minting character in progress...\");\n        const mintTxn = await gameContract.mintCharacterNFT(characterId);\n        await mintTxn.wait();\n        console.log(\"mintTxn\", mintTxn); // Mint が終了したら、ローディングマークを消す。\n\n        setMintingCharacter(false);\n      }\n    } catch (error) {\n      console.warn(\"MintCharacterAction Error:\", error); // エラーが発生した場合も、ローディングマークを消す。\n\n      setMintingCharacter(false);\n    }\n  }; // ページがロードされた瞬間に下記を実行する\n\n\n  useEffect(() => {\n    const {\n      ethereum\n    } = window;\n\n    if (ethereum) {\n      const provider = new ethers.providers.Web3Provider(ethereum);\n      const signer = provider.getSigner();\n      const gameContract = new ethers.Contract(CONTRACT_ADDRESS, myEpicGame.abi, signer); // gameContractの状態を更新する\n\n      setGameContract(gameContract);\n    } else {\n      console.log(\"Ethereum object not found\");\n    }\n  }, []);\n  useEffect(() => {\n    // NFTキャラクターのデータをスマートコントラクトから取得する\n    const getCharacters = async () => {\n      try {\n        console.log(\"Getting contract characters to mint\"); // ミント可能な全NFTキャラクターをコントラクトから呼び出す\n\n        const charactersTxn = await gameContract.getAllDefaultCharacters();\n        console.log(\"charactersTxn\", charactersTxn); // すべてのNFTキャラクターのデータを変換する\n\n        const characters = charactersTxn.map(characterData => transformCharacterData(characterData)); // ミント可能なすべてのNFTキャラクターの状態を設定する\n\n        setCharacters(characters);\n      } catch (error) {\n        console.error(\"Something went wrong fetching characters:\", error);\n      }\n    }; // イベントを受信したときに起動するコールバックメソッド onCharacterMint を追加する\n\n\n    const onCharacterMint = async (sender, tokenId, characterIndex) => {\n      console.log(`CharacterNFTMinted - sender: ${sender} tokenId: ${tokenId.toNumber()} characterIndex: ${characterIndex.toNumber()}`); // NFT キャラクターがMintされたら、コントラクトからメタデータを受け取り、アリーナ（ボスとのバトルフィールド)に移動するための状態に設定する\n\n      if (gameContract) {\n        const characterNFT = await gameContract.checkIfUserHasNFT();\n        console.log(\"CharacterNFT: \", characterNFT);\n        setCharacterNFT(transformCharacterData(characterNFT));\n        alert(`NFTキャラクターがMintされました -- リンクはこちらです:https://rinkeby.rarible.com/token/${gameContract.address}:${tokenId.toNumber()}?tab=details`);\n      }\n    }; // gameContractの準備ができたら、NFTキャラクターを読み込む\n\n\n    if (gameContract) {\n      getCharacters(); // リスナーの設定：NFTキャラクターがMintされた通知を受け取る\n\n      gameContract.on(\"CharacterNFTMinted\", onCharacterMint);\n    }\n\n    return () => {\n      // コンポーネントがマウントされたら、リスナーを停止する\n      if (gameContract) {\n        gameContract.off(\"CharacterNFTMinted\", onCharacterMint);\n      }\n    };\n  }, [gameContract]);\n\n  const renderCharacters = () => characters.map((character, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"character-item\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"name-container\",\n      children: /*#__PURE__*/_jsxDEV(\"p\", {\n        children: character.name\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n      src: character.imageURI,\n      alt: character.name\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      type: \"button\",\n      className: \"character-mint-button\",\n      onClick: mintCharacterNFTAction(index),\n      children: `Mint ${character.name}`\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 7\n    }, this)]\n  }, character.name, true, {\n    fileName: _jsxFileName,\n    lineNumber: 113,\n    columnNumber: 5\n  }, this));\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"select-character-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"\\u23EC \\u4E00\\u7DD2\\u306B\\u6226\\u3046 NFT \\u30AD\\u30E3\\u30E9\\u30AF\\u30BF\\u30FC\\u3092\\u9078\\u629E \\u23EC\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 7\n    }, this), characters.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"character-grid\",\n      children: renderCharacters()\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 9\n    }, this), mintingCharacter && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"loading\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"indicator\",\n        children: [/*#__PURE__*/_jsxDEV(LoadingIndicator, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 136,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Minting In Progress...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 137,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 135,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 127,\n    columnNumber: 5\n  }, this);\n};\n\n_s(SelectCharacter, \"YAIluGJumFDmJAPdOeDT94pTudM=\");\n\n_c = SelectCharacter;\nexport default SelectCharacter;\n\nvar _c;\n\n$RefreshReg$(_c, \"SelectCharacter\");","map":{"version":3,"names":["LoadingIndicator","React","useEffect","useState","ethers","CONTRACT_ADDRESS","transformCharacterData","myEpicGame","SelectCharacter","setCharacterNFT","characters","setCharacters","gameContract","setGameContract","mintingCharacter","setMintingCharacter","mintCharacterNFTAction","characterId","console","log","mintTxn","mintCharacterNFT","wait","error","warn","ethereum","window","provider","providers","Web3Provider","signer","getSigner","Contract","abi","getCharacters","charactersTxn","getAllDefaultCharacters","map","characterData","onCharacterMint","sender","tokenId","characterIndex","toNumber","characterNFT","checkIfUserHasNFT","alert","address","on","off","renderCharacters","character","index","name","imageURI","length"],"sources":["/Users/tomohiro/programing/ETH-NFT-game/nft-game-starter-project/src/Components/SelectCharacter/index.js"],"sourcesContent":["import LoadingIndicator from \"../../Components/LoadingIndicator\";\nimport React, { useEffect, useState } from \"react\";\nimport \"./SelectCharacter.css\";\nimport { ethers } from \"ethers\";\nimport { CONTRACT_ADDRESS, transformCharacterData } from \"../../constants\";\nimport myEpicGame from \"../../utils/MyEpicGame.json\";\n\nconst SelectCharacter = ({ setCharacterNFT }) => {\n    // characters = コントラクトから返されるNFTキャラクターのメタデータを保持するプロパティ\n    // setCharacters = charactersの状態を更新するプロパティ\n    // gameContract = コントラクトの状態を初期化して保存するプロパティ。\n    const [characters, setCharacters] = useState([]);\n    const [gameContract, setGameContract] = useState(null);\n    // Minting の状態保存する状態変数を初期化します。\n    const [mintingCharacter, setMintingCharacter] = useState(false);\n\n    // NFTキャラクターをMintする\n    const mintCharacterNFTAction = (characterId) => async () => {\n        try {\n            if (gameContract) {\n                 // Mint が開始されたら、ローディングマークを表示する。\n                setMintingCharacter(true);\n                console.log(\"Minting character in progress...\");\n                const mintTxn = await gameContract.mintCharacterNFT(characterId);\n                await mintTxn.wait();\n                console.log(\"mintTxn\", mintTxn);\n                // Mint が終了したら、ローディングマークを消す。\n                setMintingCharacter(false);\n            }\n        } catch(error) {\n            console.warn(\"MintCharacterAction Error:\", error);\n             // エラーが発生した場合も、ローディングマークを消す。\n            setMintingCharacter(false);\n        }\n    };\n\n    // ページがロードされた瞬間に下記を実行する\n    useEffect(() => {\n        const { ethereum } = window;\n        if (ethereum) {\n            const provider = new ethers.providers.Web3Provider(ethereum);\n            const signer = provider.getSigner();\n            const gameContract = new ethers.Contract(\n                CONTRACT_ADDRESS,\n                myEpicGame.abi,\n                signer\n            );\n\n            // gameContractの状態を更新する\n            setGameContract(gameContract);\n        } else {\n            console.log(\"Ethereum object not found\");\n        }\n    }, []);\n\n    useEffect(() => {\n        // NFTキャラクターのデータをスマートコントラクトから取得する\n        const getCharacters = async () => {\n            try {\n                console.log(\"Getting contract characters to mint\");\n                // ミント可能な全NFTキャラクターをコントラクトから呼び出す\n                const charactersTxn = await gameContract.getAllDefaultCharacters();\n\n                console.log(\"charactersTxn\", charactersTxn);\n\n                // すべてのNFTキャラクターのデータを変換する\n                const characters = charactersTxn.map((characterData) => \n                transformCharacterData(characterData)\n                );\n\n                // ミント可能なすべてのNFTキャラクターの状態を設定する\n                setCharacters(characters);\n            } catch (error) {\n                console.error(\"Something went wrong fetching characters:\", error);\n            }\n        };\n\n        // イベントを受信したときに起動するコールバックメソッド onCharacterMint を追加する\n        const onCharacterMint = async (sender, tokenId, characterIndex) => {\n            console.log(\n                `CharacterNFTMinted - sender: ${sender} tokenId: ${tokenId.toNumber()} characterIndex: ${characterIndex.toNumber()}`\n            );\n            // NFT キャラクターがMintされたら、コントラクトからメタデータを受け取り、アリーナ（ボスとのバトルフィールド)に移動するための状態に設定する\n        if (gameContract) {\n            const characterNFT = await gameContract.checkIfUserHasNFT();\n            console.log(\"CharacterNFT: \", characterNFT);\n            setCharacterNFT(transformCharacterData(characterNFT));\n\n            alert(\n                `NFTキャラクターがMintされました -- リンクはこちらです:https://rinkeby.rarible.com/token/${\n                    gameContract.address\n                  }:${tokenId.toNumber()}?tab=details`\n            );\n          }\n        };\n        // gameContractの準備ができたら、NFTキャラクターを読み込む\n        if (gameContract) {\n            getCharacters();\n            // リスナーの設定：NFTキャラクターがMintされた通知を受け取る\n            gameContract.on(\"CharacterNFTMinted\", onCharacterMint);\n        }\n\n        return() => {\n            // コンポーネントがマウントされたら、リスナーを停止する\n            if (gameContract){\n                gameContract.off(\"CharacterNFTMinted\", onCharacterMint);\n            }\n        };\n    }, [gameContract]);\n\n    const renderCharacters = () =>\n  characters.map((character, index) => (\n    <div className=\"character-item\" key={character.name}>\n      <div className=\"name-container\">\n        <p>{character.name}</p>\n      </div>\n      <img src={character.imageURI} alt={character.name} />\n      <button\n        type=\"button\"\n        className=\"character-mint-button\"\n        onClick={mintCharacterNFTAction(index)}\n      >{`Mint ${character.name}`}</button>\n    </div>\n  ));\n\n  return (\n    <div className=\"select-character-container\">\n      <h2>⏬ 一緒に戦う NFT キャラクターを選択 ⏬</h2>\n      {characters.length > 0 && (\n        <div className=\"character-grid\">{renderCharacters()}</div>\n      )}\n      {/* mintingCharacter = trueの場合のみ、ローディングマークを表示します。*/}\n      {mintingCharacter && (\n        <div className=\"loading\">\n          <div className=\"indicator\">\n            <LoadingIndicator />\n            <p>Minting In Progress...</p>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\nexport default SelectCharacter;"],"mappings":";;;AAAA,OAAOA,gBAAP,MAA6B,mCAA7B;AACA,OAAOC,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,OAAO,uBAAP;AACA,SAASC,MAAT,QAAuB,QAAvB;AACA,SAASC,gBAAT,EAA2BC,sBAA3B,QAAyD,iBAAzD;AACA,OAAOC,UAAP,MAAuB,6BAAvB;;;AAEA,MAAMC,eAAe,GAAG,QAAyB;EAAA;;EAAA,IAAxB;IAAEC;EAAF,CAAwB;EAC7C;EACA;EACA;EACA,MAAM,CAACC,UAAD,EAAaC,aAAb,IAA8BR,QAAQ,CAAC,EAAD,CAA5C;EACA,MAAM,CAACS,YAAD,EAAeC,eAAf,IAAkCV,QAAQ,CAAC,IAAD,CAAhD,CAL6C,CAM7C;;EACA,MAAM,CAACW,gBAAD,EAAmBC,mBAAnB,IAA0CZ,QAAQ,CAAC,KAAD,CAAxD,CAP6C,CAS7C;;EACA,MAAMa,sBAAsB,GAAIC,WAAD,IAAiB,YAAY;IACxD,IAAI;MACA,IAAIL,YAAJ,EAAkB;QACb;QACDG,mBAAmB,CAAC,IAAD,CAAnB;QACAG,OAAO,CAACC,GAAR,CAAY,kCAAZ;QACA,MAAMC,OAAO,GAAG,MAAMR,YAAY,CAACS,gBAAb,CAA8BJ,WAA9B,CAAtB;QACA,MAAMG,OAAO,CAACE,IAAR,EAAN;QACAJ,OAAO,CAACC,GAAR,CAAY,SAAZ,EAAuBC,OAAvB,EANc,CAOd;;QACAL,mBAAmB,CAAC,KAAD,CAAnB;MACH;IACJ,CAXD,CAWE,OAAMQ,KAAN,EAAa;MACXL,OAAO,CAACM,IAAR,CAAa,4BAAb,EAA2CD,KAA3C,EADW,CAEV;;MACDR,mBAAmB,CAAC,KAAD,CAAnB;IACH;EACJ,CAjBD,CAV6C,CA6B7C;;;EACAb,SAAS,CAAC,MAAM;IACZ,MAAM;MAAEuB;IAAF,IAAeC,MAArB;;IACA,IAAID,QAAJ,EAAc;MACV,MAAME,QAAQ,GAAG,IAAIvB,MAAM,CAACwB,SAAP,CAAiBC,YAArB,CAAkCJ,QAAlC,CAAjB;MACA,MAAMK,MAAM,GAAGH,QAAQ,CAACI,SAAT,EAAf;MACA,MAAMnB,YAAY,GAAG,IAAIR,MAAM,CAAC4B,QAAX,CACjB3B,gBADiB,EAEjBE,UAAU,CAAC0B,GAFM,EAGjBH,MAHiB,CAArB,CAHU,CASV;;MACAjB,eAAe,CAACD,YAAD,CAAf;IACH,CAXD,MAWO;MACHM,OAAO,CAACC,GAAR,CAAY,2BAAZ;IACH;EACJ,CAhBQ,EAgBN,EAhBM,CAAT;EAkBAjB,SAAS,CAAC,MAAM;IACZ;IACA,MAAMgC,aAAa,GAAG,YAAY;MAC9B,IAAI;QACAhB,OAAO,CAACC,GAAR,CAAY,qCAAZ,EADA,CAEA;;QACA,MAAMgB,aAAa,GAAG,MAAMvB,YAAY,CAACwB,uBAAb,EAA5B;QAEAlB,OAAO,CAACC,GAAR,CAAY,eAAZ,EAA6BgB,aAA7B,EALA,CAOA;;QACA,MAAMzB,UAAU,GAAGyB,aAAa,CAACE,GAAd,CAAmBC,aAAD,IACrChC,sBAAsB,CAACgC,aAAD,CADH,CAAnB,CARA,CAYA;;QACA3B,aAAa,CAACD,UAAD,CAAb;MACH,CAdD,CAcE,OAAOa,KAAP,EAAc;QACZL,OAAO,CAACK,KAAR,CAAc,2CAAd,EAA2DA,KAA3D;MACH;IACJ,CAlBD,CAFY,CAsBZ;;;IACA,MAAMgB,eAAe,GAAG,OAAOC,MAAP,EAAeC,OAAf,EAAwBC,cAAxB,KAA2C;MAC/DxB,OAAO,CAACC,GAAR,CACK,gCAA+BqB,MAAO,aAAYC,OAAO,CAACE,QAAR,EAAmB,oBAAmBD,cAAc,CAACC,QAAf,EAA0B,EADvH,EAD+D,CAI/D;;MACJ,IAAI/B,YAAJ,EAAkB;QACd,MAAMgC,YAAY,GAAG,MAAMhC,YAAY,CAACiC,iBAAb,EAA3B;QACA3B,OAAO,CAACC,GAAR,CAAY,gBAAZ,EAA8ByB,YAA9B;QACAnC,eAAe,CAACH,sBAAsB,CAACsC,YAAD,CAAvB,CAAf;QAEAE,KAAK,CACA,sEACGlC,YAAY,CAACmC,OACd,IAAGN,OAAO,CAACE,QAAR,EAAmB,cAHxB,CAAL;MAKD;IACF,CAhBD,CAvBY,CAwCZ;;;IACA,IAAI/B,YAAJ,EAAkB;MACdsB,aAAa,GADC,CAEd;;MACAtB,YAAY,CAACoC,EAAb,CAAgB,oBAAhB,EAAsCT,eAAtC;IACH;;IAED,OAAM,MAAM;MACR;MACA,IAAI3B,YAAJ,EAAiB;QACbA,YAAY,CAACqC,GAAb,CAAiB,oBAAjB,EAAuCV,eAAvC;MACH;IACJ,CALD;EAMH,CArDQ,EAqDN,CAAC3B,YAAD,CArDM,CAAT;;EAuDA,MAAMsC,gBAAgB,GAAG,MAC3BxC,UAAU,CAAC2B,GAAX,CAAe,CAACc,SAAD,EAAYC,KAAZ,kBACb;IAAK,SAAS,EAAC,gBAAf;IAAA,wBACE;MAAK,SAAS,EAAC,gBAAf;MAAA,uBACE;QAAA,UAAID,SAAS,CAACE;MAAd;QAAA;QAAA;QAAA;MAAA;IADF;MAAA;MAAA;MAAA;IAAA,QADF,eAIE;MAAK,GAAG,EAAEF,SAAS,CAACG,QAApB;MAA8B,GAAG,EAAEH,SAAS,CAACE;IAA7C;MAAA;MAAA;MAAA;IAAA,QAJF,eAKE;MACE,IAAI,EAAC,QADP;MAEE,SAAS,EAAC,uBAFZ;MAGE,OAAO,EAAErC,sBAAsB,CAACoC,KAAD,CAHjC;MAAA,UAIG,QAAOD,SAAS,CAACE,IAAK;IAJzB;MAAA;MAAA;MAAA;IAAA,QALF;EAAA,GAAqCF,SAAS,CAACE,IAA/C;IAAA;IAAA;IAAA;EAAA,QADF,CADE;;EAeF,oBACE;IAAK,SAAS,EAAC,4BAAf;IAAA,wBACE;MAAA;IAAA;MAAA;MAAA;MAAA;IAAA,QADF,EAEG3C,UAAU,CAAC6C,MAAX,GAAoB,CAApB,iBACC;MAAK,SAAS,EAAC,gBAAf;MAAA,UAAiCL,gBAAgB;IAAjD;MAAA;MAAA;MAAA;IAAA,QAHJ,EAMGpC,gBAAgB,iBACf;MAAK,SAAS,EAAC,SAAf;MAAA,uBACE;QAAK,SAAS,EAAC,WAAf;QAAA,wBACE,QAAC,gBAAD;UAAA;UAAA;UAAA;QAAA,QADF,eAEE;UAAA;QAAA;UAAA;UAAA;UAAA;QAAA,QAFF;MAAA;QAAA;QAAA;QAAA;MAAA;IADF;MAAA;MAAA;MAAA;IAAA,QAPJ;EAAA;IAAA;IAAA;IAAA;EAAA,QADF;AAiBD,CAvID;;GAAMN,e;;KAAAA,e;AAwIN,eAAeA,eAAf"},"metadata":{},"sourceType":"module"}